/**
 ******************************************************************************
 * @file    LwIP/LwIP_HTTP_Server_Netconn_RTOS/Src/app_ethernet.c
 * @author  MCD Application Team
 * @brief   Ethernet specefic module
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics International N.V.
 * All rights reserved.</center></h2>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted, provided that the following conditions are met:
 *
 * 1. Redistribution of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of STMicroelectronics nor the names of other
 *    contributors to this software may be used to endorse or promote products
 *    derived from this software without specific written permission.
 * 4. This software, including modifications and/or derivative works of this
 *    software, must execute solely and exclusively on microcontroller or
 *    microprocessor devices manufactured by or for STMicroelectronics.
 * 5. Redistribution and use of this software other than as permitted under
 *    this license is void and will automatically terminate your rights under
 *    this license.
 *
 * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
 * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
 * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */

/* Includes ------------------------------------------------------------------*/
#include "lwip/opt.h"
#include "main.h"
#include "lwip/dhcp.h"
#include "app_ethernet.h"
#include "ethernetif.h"
#include "smarthome_log.h"

#define ETH_ENTER(fnc)				SHOME_LogEnter("eth", fnc)
#define ETH_MSG(fnc, ...)			SHOME_LogMsg(fnc, ##__VA_ARGS__)
#define ETH_EXIT(fnc, rc, fail)		SHOME_LogExit("eth", fnc, rc, fail)

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

#define MAX_DHCP_TRIES  4
__IO uint8_t DHCP_state = DHCP_OFF;

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/**
 * @brief update the state machine
 * @param
 * @retval None
 */
void DHCP_NetifUp() {
	ETH_ENTER("DHCP_NetifUp");
	DHCP_state = DHCP_START;
	ETH_EXIT("DHCP_NetifUp", 0, 0);
}


void DHCP_NetifDown() {
	ETH_ENTER("DHCP_NetifUp");
	DHCP_state = DHCP_LINK_DOWN;
	ETH_EXIT("DHCP_NetifUp", 0, 0);
}

uint8_t DHCP_GetStatus() {
	return DHCP_state;
}

/**
 * @brief  DHCP Process
 * @param  argument: network interface
 * @retval None
 */
void DHCP_thread(void const * argument) {
	ETH_ENTER("DHCP_thread");
	struct netif *netif = (struct netif *) argument;
	struct dhcp *dhcp;
	uint8_t iptxt[20];

	for (;;) {
		switch (DHCP_state) {
		case DHCP_START : {
			ip_addr_set_zero_ip4(&netif->ip_addr);
			ip_addr_set_zero_ip4(&netif->netmask);
			ip_addr_set_zero_ip4(&netif->gw);
			dhcp_start(netif);
			DHCP_state = DHCP_WAIT_ADDRESS;
			ETH_MSG("State: Looking for DHCP server...\r\n");
		}
			break;

		case DHCP_WAIT_ADDRESS : {
			if (dhcp_supplied_address(netif)) {
				DHCP_state = DHCP_ADDRESS_ASSIGNED;

				sprintf((char *) iptxt, "%s",
						ip4addr_ntoa((const ip4_addr_t *) &netif->ip_addr));
				ETH_MSG("IP address assigned by a DHCP server: %s\r\n", iptxt);
			} else {
				dhcp = (struct dhcp *) netif_get_client_data(netif,
						LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);

				/* DHCP timeout */
				if (dhcp->tries > MAX_DHCP_TRIES) {
					DHCP_state = DHCP_TIMEOUT;

					/* Stop DHCP */
					dhcp_stop(netif);

					ETH_MSG("ERROR: DHCP Timeout!\r\n");
				}
			}
		}
			break;
		case DHCP_LINK_DOWN : {
			/* Stop DHCP */
			dhcp_stop(netif);
			DHCP_state = DHCP_OFF;
		}
			break;
		default:
			break;
		}

		/* wait 250 ms */
		osDelay(250);
	}
	ETH_EXIT("DHCP_thread", 0, 0);
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
